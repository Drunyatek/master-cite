<!DOCTYPE HTML>
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
  <title>Реферат - Исследование методов создания алгоритмов синтеза программ на основе языков описания аппаратуры в САПР вычислительной техники - Хвищук Андрей Юрьевич</title>
  <link rel="stylesheet" type="text/css" href="../css/master_style.css">
</head>

<body lang="ru">
<div class="container">
	<div id="topblock">
		<div id="langbox">
			<a href="indexu.htm">Ua</a> &nbsp; 
			<a href="indexe.htm">En</a> 
		</div>
		<div id="donntu">
			<a href="http://donntu.org" target=_blank>ДонНТУ</a> &nbsp; <a href="http://masters.donntu.org" target=_blank>Портал магистров</a>
		</div>
	</div>

	<div id="header">
		<div id="photomag">
			<a href="../khvishuk_big.jpg"><img src="../photo.jpg"  width=180 height=240 title="Магистр ДонНТУ Хвищук Андрей Юрьевич" alt="Магистр ДонНТУ Хвищук Андрей Юрьевич"></a>
		</div>
		<div id="headertext">
			<h1 class="hdr">Хвищук Андрей Юрьевич</h1>
			<h3 class="hdr">Факультет компьютерных наук и технологий</h3>
			<h3 class="hdr">Кафедра программной инженерии</h3>
			<h3 class="hdr">Специальность <q>Системы автоматизированного проектирования</q></h3>
			<h2 class="hdr">Исследование методов создания алгоритмов синтеза программ на основе языков описания аппаратуры в САПР вычислительной техники</h2>
			<h3 class="hdr">Научный руководитель: д.т.н., проф. Григорьев Александр Владимирович</h3>
		</div>
	</div>

	<div id="middleblock">
		
		<div id="menu">
			<a class="button color" href="../index.htm">Резюме</a>
			<a class="button color" href="../bio/index.htm">Биография</a>
			<a class="button colorfix">Реферат</a>
			<a class="button color" href="../library/index.htm">Библиотека</a>
			<a class="button color" href="../links/index.htm">Ссылки</a>
			<a class="button color" href="../links/zvit.htm">Отчет о поиске</a> 
			<a class="button color" href="../ind/index.htm">Индивидуальный раздел</a>
		</div>
		
		<div id="maintext">
			
			<h2>Реферат по теме выпускной работы</h2>
			<div class="comment">
				<p>При написании данного реферата магистерская работа ещё не завершена. Окончательное завершение: июнь 2019 года. Полный текст работы и материалы по теме могут быть получены у автора или его руководителя после указанной даты.</p>
			</div>
			
			<h2>Содержание</h2>

			<ul class="content">
				<li class="ct1"><a href="#p0">Введение</a></li>
				<li class="ct1"><a href="#p1">1. Актуальность темы</a></li>
				<li class="ct1"><a href="#p2">2. Цель и задачи исследования, планируемые результаты</a></li>
				
				<li class="ct1"><a href="#p3">3. Обзор исследований и разработок</a></li>
				<li class="ct2"><a href="#p31">3.1 Обзор международных источников</a></li>
				<li class="ct2"><a href="#p32">3.2 Обзор национальных источников</a></li>
				<li class="ct2"><a href="#p33">3.3 Обзор локальных источников</a></li>
				
				<li class="ct1"><a href="#p4">4. Процесс проектирования ПЛИС с использованием FPGA</a></li>
				
				<li class="ct1"><a href="#p5">5. Анализ существующих САПР</a></li>
					<li class="ct2"><a href="#p51">5.1 Vivado от Xilinx</a></li>
					<li class="ct2"><a href="#p52">5.2 Quartus-Prime от Altera Intel</a></li>
					<li class="ct2"><a href="#p53">5.3 Active-HDL от Aldec</a></li>

				<li class="ct1"><a href="#p6">6. Анализ способов создания машин логического вывода</a></li>
					<li class="ct2"><a href="#p61">6.1 CLIPS</a></li>
					<li class="ct2"><a href="#p62">6.2 Protege</a></li>
					<li class="ct2"><a href="#p63">6.3 Использование ТМО для организации логического вывода</a></li>

				<li class="ct1"><a href="#p7">7. Постановка задачи и описание разрабатываемой надстройки</a></li>

				<li class="ct1"><a href="#p8">Выводы</a></li>
				
				<li class="ct1"><a href="#ref">Список источников</a></li>
			</ul>
			
			<a name="p0"></a>
			<h2>Введение</h2>
			
			<p>
			На сегодняшний день проектирование ПЛИС является одной из наиболее быстро растущих предметных областей. 
			Это обусловлено тем, что количество различных гаджетов, для которых и нужны чипы, только растёт, и с каждым 
			годом только сильнее. Необходимость обеспечивать рынок нужным объёмом продукции вынуждает инженеров уменьшать 
			время изготовления конечного продукта, и, как следствие этого,  автоматизировать процесс проектирования.
			</p>
			
			<p> 
			Эффективность процессов проектирования в любых предметных областях во многом определяется наличием и 
			степенью развития средств, позволяющих проектировщику формализовать и повторно использовать экспертные 
			методики для проектирования тех или иных изделий. Методики проектирования призваны существенно упростить 
			проектировщику решение задачи проектирования, исходя из требований технического задания на изделие (ТЗ). 
			Такие инструментальные средства позволяют создавать методики проектирования, сохранять их, редактировать 
			и применять по мере надобности. Эффект в этом случае состоит в сокращении времени и трудоемкости 
			процесса принятия проектных решений. 
			</p>
			
			<a name="p1"></a>
			<h2>1. Актуальность темы</h2>
			
			<p>
			При проектировании ПЛИС инженеры используют самые передовые программные комплексы, которые берут 
			на себя такие трудозатратные операции как трассировка схемы, временной анализ, проверка на несоответствия 
			и ошибки и т.п. Но для работы с любым из пакетов, которые сейчас существуют на рынке, проектировщик 
			по&ndash;прежнему должен обладать высоким уровнем знаний предметной области. Кроме того, для ведущих компаний 
			в сфере проектирования вычислительной техники (и не только для них) имеет место проблема: <q>Как сохранить 
			знания и опыт сотрудников?</q> и, более того: <q>Как извлечь из этого практическую пользу?</q>.
			</p>
			
			<p>В связи с этим возникает следующая задача: создание базы знаний проектирования ПЛИС. База знаний, 
				на данный момент, является самым современным и технологичным решением в области хранения данных. 
				Она позволит не только сохранить накопленный годами опыт сотрудников, но и сможет применить его для 
				синтеза новых продуктов&nbsp;<a href="#ref1">[1]</a>.</p>
			
			<a name="p2"></a>
			<h2>2. Цель и задачи исследования, планируемые результаты</h2>
			
			<p>Целью исследования данной работы является:</p>
			<ol>
				<li>Проанализировать существующие САПР FPGA и выявить их основные положительные качества.</li>
				<li>Проанализировать существующие подходы для создания машин логического вывода.</li>
				<li>Выбрать лучший подход для реализации базы знаний и обосновать решение.</li>
				<li>Описать структуру разрабатываемого программного продукта.</li>
			</ol>
			<p><span class=itl>Объектом исследования</span> данной работы является практическая реализация базы знаний в виде надстройки над САПР РЭА.</p>

			<a name="p3"></a>
			<h2>3. Обзор исследований и разработок</h2>

			<a name="p31"></a>
			<h3>3.1 Обзор международных источников</h3>

			<p>
				В работе <q>Automated sports rim design in CAD system</q> M.S.&nbsp;Abdul Karim и Ahmad&nbsp;Zulhakim Ab&nbsp;Rashid&nbsp;<a href="#ref2">[2]</a>
				исследуют пути создания автоматизации на этапе проектирования для сокращения времени на проектирование 
				в рамках пакета автоматизированного проектирования (САПР). Выяснилось, что одним из наиболее эффективных 
				способов реализации автоматизации в проектировании является автоматизация повторяющихся шагов, которые 
				необходимо выполнять при каждом создании детали. Этот проект был нацелен на разработку способа автоматизации
				повторяющихся шагов, и было проведено тематическое исследование конструкции обода колеса.
			</p>
			<p>В работе <q>A Methodology of Knowledge Management Based on Ontology in Collaborative Design</q>
				Junming&nbsp;Hou, Chong&nbsp;Su, Yingying&nbsp;Su, Wanshan&nbsp;Wang&nbsp;<a href="#ref3">[3]</a> предложена методология управления знаниями 
				в совместном дизайне, представляются концепции совместного проектирования и управления знаниями, 
				а также вводится выражение знаний, основанное на онтологии.
			</p>
			
			<a name="p32"></a>
			<h3>3.2 Обзор национальных источников</h3>
			
			<p>Книга <q>Базы знаний интеллектуальных систем</q> Т.А.&nbsp;Гавриловой, В.Ф.&nbsp;Хорошевского&nbsp;<a href="#ref4">[4]</a> является 
				учебником для технических вузов по входящим в различные дисциплины вопросам разработки интеллектуальных 
				систем. Актуальность предмета определяется растущим применением инженерии знаний и системного анализа в 
				различных областях деятельности.
			</p>
			
			<p>Особенностью изложения является его практическая направленность: освоения имеющегося материала 
				достаточно для начала самостоятельной работы над созданием интеллектуальной системы, основанной 
				на знаниях.
			</p>
			
			<p>В учебнике учтена все возрастающая роль Интернета, и потому подробно рассматривается применение инженерии знаний в Сети.</p>
			
			<a name="p33"></a>
			<h3>3.3 Обзор локальных источников</h3>
			
			<p>Среди магистров ДонНТУ можно выделить следующие публикации.</p>
			
			<p>В магистерской работе О.В.&nbsp;Малявки <q>Исследование способов организации построения 
				инструментальной интеллектуальной оболочки для проектирования сложных объектов на 
				базе экспертных методик</q>&nbsp;<a href="#ref5">[5]</a> произведён анализ существующих инструментальных средств 
				построения САПР, усовершенствованы существующие алгоритмы. Осуществлена оценка их 
				эффективности и построен с их помощью инструментарий для автоматизации создания 
				проблемно&ndash;ориентированных САПР.
			</p>
			
			<a name="p4"></a>
			<h2>4. Процесс проектирования ПЛИС с использованием FPGA</h2>
						
			<p>Проектирование цифровых устройств представляет из себя итерационный процесс, 
				основанный на принципах функциональной декомпозиции&nbsp;<a href="#ref6">[6]</a>. Проектирование традиционно 
				разделяют на этапы:</p>
				<ul>
					<li>системный,</li>
					<li>структурно-алгоритмический,</li>
					<li>функционально-логический,</li>
					<li>конструкторско-технологический,</li>
				</ul>
			
			<p><span class="underline">На системном этапе</span> весь проект разбивается на части, определяются их 
				назначение и взаимосвязь, принимается решение о способах реализации частей. Решение об использовании 
				ПЛИС, принятое на системном этапе, позволяет выполнять конструкторско-технологическое проектирование 
				модуля верхнего уровня параллельно с выполнением других этапов.</p>
			
			<p><span class="underline">Структурно-алгоритмический и функционально&ndash;логический этапы</span> проектирования на ПЛИС представляют из 
				себя итерационный процесс ввода описаний с последующей их верификацией.</p>
			
			<p>Современные САПР поддерживают несколько способов описания устройства:</p>
						
			<ul>
				<li>Описание с использованием языков описания аппаратных средств (VHDL, Verilog, AHDL и других) 
					при помощи специализированного текстового редактора.</li>
				<li>Схемотехнический способ с помощью программы визуального проектирования, в которой разработчик 
					помещает на рабочую область функциональные блоки и производит их соединение. По окончании 
					визуального проектирования схема преобразуется в языковое описание.</li>
				<li>Графическое представление цифровых автоматов в специализированном редакторе, 
					обеспечивающем преобразование полученного графического представление в языковое описание.</li>
				<li>Описание комбинационной логики с помощью таблиц истинности, карт Карно, функций алгебры логики.</li>
			</ul>

			<p><span class="undeline">Конструкторско&ndash;технологический этап</span> проектирования с использованием ПЛИС разделяется на связанные подзадачи:</p>

			<ul>
				<li>Синтез (Synthesis).</li>
				<li>Глобальное размещение (Mapping).</li>
				<li>Локальное размещение (Placement).</li>
				<li>Трассировку (Routing).</li>
			</ul>
			
			<p><span class="underline">Синтез (Synthesis)</span> &mdash; отображение схемы в базис логических ресурсов ПЛИС. Цель синтеза &mdash; преобразование 
				исходного схемотехнического или высокоуровневого описания устройства в описание, оптимально реализуемое 
				на выбранной ПЛИС, а также пригодное для дальнейшего размещения и трассировки.</p>
			
			<p><span class="underline">Глобальное размещение (Mapping)</span> &mdash; назначение частям схемы макрообластей ПЛИС, представляющих 
				из себя группы соседних логических блоков, макроячеек и блоков ввода/вывода. Цель глобального 
				размещения: создание наилучших условий для локального размещения и трассировки. Для достижения 
				этого используется информация о назначении сигналам внешних выводов, в большой мере влияющая на 
				назначение свободных областей ПЛИС частям схемы. Как правило, назначение логических ресурсов 
				кристалла макрообластям производят с избыточностью, облегчающей последующую трассировку.</p>
			
			<p><span class="underline">Локальное размещение (Placement)</span> &mdash; детальное назначение логических ресурсов макрообластей, 
				выбранных на стадии глобального размещения, частям схемы. При этом преследуются цели: равномерное 
				заполнение макрообластей элементами и трассами, минимизация суммарной длинны линий связи и другие. 
				Основная цель локального размещения &mdash; создание наилучших условий для трассировки.</p>
			
			<p><span class="underline">Трассировка (Routing)</span> &mdash; определение связей между логическими блоками, 
				макроячейками и блоками ввода-вывода в виде коммутированных участков трасс. На данной стадии преследуются 
				цели: выбора трасс, обеспечивающих заданное время распространения сигнала; минимизации суммарного 
				количества программируемых точек связи; минимизация времени распространения сигнала по самой длинной 
				линии связи. Важной задачей стадии трассировки является определение временных параметров полученного 
				варианта устройства и сравнение их с заданными ограничениями.</p>

			<p>Процесс проектирования является итерационным. После выполнения каждой стадии производится 
				верификация полученного описания, для чего применяются различные средства моделирования и 
				анализа. В современных САПР обычно предусматривается моделирования на следующих этапах:</p>

			<ul>
				<li>Моделирование поведенческого описания.</li>
				<li>Моделирование описания на языке регистровых передач.</li>
				<li>Моделирование технологического описания (после синтеза).</li>
				<li>Моделирование на вентильном уровне.</li>
				<li>Моделирование после размещения.</li>
				<li>Моделирование после трассировки.</li>
			</ul>
						
			<a name="p5"></a>

			<h2>5. Анализ существующих САПР</h2>

			<a name="p51"></a>
			<h3>5.1 Vivado от Xilinx</h3>

			<p>Vivado Design Suite &mdash; это программный пакет, разработанный Xilinx для 
				синтеза и анализа HDL проектов, заменяющий Xilinx ISE дополнительными 
				функциями для разработки систем на чипах (System on Chip, SoC) и высокоуровневого 
				синтеза (High-Level Synthesis). В отличие от ISE, который использовал для моделирования 
				ModelSim, Vivado System Edition включает встроенный логический симулятор&nbsp;<a href="#ref7">[7]</a>.</p>

			<p>Vivado позволяет разработчикам синтезировать проекты, выполнять временной анализ, 
				изучать RTL&ndash;диаграммы, моделировать реакцию проекта на различные воздействия и 
				настраивать целевое устройство с помощью программиста. Vivado &mdash; это среда разработки 
				продуктов FPGA от Xilinx, тесно связанная с архитектурой таких чипов, и ее нельзя 
				использовать с продуктами FPGA других производителей.</p>

			<p>В состав Vivado входят следующие компоненты:</p>

			<ul>
				<li><span class="bld">Компилятор Vivado High-Level Synthesis</span> позволяет описывать схемы 
					на C, C++ и SystemC для устройств Xilinx без необходимости создавать RTL вручную. 
					Vivado&nbsp;HLS широко рассматривается для повышения производительности труда разработчиков, 
					и подтверждено, что он поддерживает классы C++, шаблоны, функции и перегрузки операторов. 
					В Vivado&nbsp;2014.1 появилась поддержка автоматического преобразования ядер OpenCL в IP 
					для устройств Xilinx. Ядра OpenCL &mdash; это программы, которые выполняются на разных платформах CPU, GPU и FPGA.
				</li>
				
				<div class="img">
					<img src="images/image1.gif" alt="Упрощённый маршрут проектирования в Vivado HLS">
					<p class="imgcaption">Рисунок 1 &mdash; Упрощённый маршрут проектирования в Vivado HLS.</p>
					<p class="imgcaption">(анимация: 8 кадров, задержка 2 с, 8 циклов повторения, 39,8 КБ)</p>
				</div>

				<li><span class="bld">Vivado Simulator</span> &mdash; симулятор скомпилированного языка, который поддерживает 
					смешанные языки, сценарии TCL, зашифрованный IP и расширенную проверку.
				</li>

				<div class="img">
					<img src="images/image2.jpg" alt="Пример симуляции в Vivado Similator">
					<p class="imgcaption">Рисунок 2 &mdash; Пример симуляции в Vivado Similator.</p>
				</div>

				<li><span class="bld">Vivado IP Integrator</span> позволяет инженерам быстро интегрировать и настраивать 
					IP из большой IP&ndash;библиотеки Xilinx. Интегратор также настроен для проектов 
					MathWorks Simulink, созданных с помощью системного генератора Xilinx и 
					высокоуровневого синтеза Vivado. 
				</li>

				<div class="img">
					<img src="images/image3.jpg" alt="Процесс проектирования с использованием Vivado IP Integrator">
					<p class="imgcaption">Рисунок 3 &mdash; Процесс проектирования с использованием Vivado IP Integrator.</p>
				</div>

				<li><span class="bld">Vivado TCL Store</span> &mdash; это система сценариев для разработки дополнений 
					к Vivado, и ее можно использовать для добавления и изменения возможностей Vivado. TCL 
					расшифровывается как Tool Command Language и является языком сценариев, на котором 
					основан сам Vivado. Все базовые функции Vivado могут вызываться и 
					управляться через сценарии TCL.
				</li>
			</ul>

			<p>Из всего вышесказанного можно выделить следующие достоинства и недостатки САПР Vivado Design Suite:</p>

			<ul><p><span class="underline">Достоинства:</span></p>
				<li>Наличие мощных инструментов для автоматизации процесса трассировки, размещения, временного анализа схем.</li>
				<li>Наличие инструментов для высокоуровневого синтеза схем на языках С, С++ и System&ndash;C.</li>
				<li>Возможность управления всем циклом разработки с помощью скриптового языка Tcl.</li>
				<li>Возможность проектирования схем с помощью различных методологий: RTL&ndash;описаний, IP&ndash;ядер, языков описания аппаратуры, синтеза высокого уровня.</li>
			</ul>

			<ul><p><span class="underline">Недостатки:</span></p>
				<li>Нет возможности задания алгоритма проектирования как методики проектирования 
					определённого класса устройств с последующим повторным использованием этого алгоритма.</li>
				<li>Для работы с САПР Vivado Design Suite проектировщик должен обладать высоким уровнем знания предметной области.</li>
			</ul>

			<a name="p52"></a>

			<h3>5.2 Quartus-Prime от Altera Intel</h3>

			<p>Intel Quartus&ndash;Prime &mdash; это программное обеспечение для проектирования программируемых 
				логических устройств, разработанное Intel; до приобретения Intel Altera инструмент 
				назывался Altera Quartus&nbsp;II. Quartus&ndash;Prime позволяет анализировать и синтезировать 
				проекты HDL, что позволяет разработчику скомпилировать проекты, выполнить временной 
				анализ, изучить RTL&ndash;диаграммы, смоделировать реакцию проекта на различные воздействия 
				и настроить целевое устройство с помощью программиста. Quartus&ndash;Prime включает в себя 
				реализацию VHDL и Verilog для описания аппаратного обеспечения, визуального редактирования 
				логических схем и моделирования векторных сигналов&nbsp;<a href="#ref8">[8]</a>.
			</p>

			<p>Quartus&ndash;Prime включает в себя такие программные функции:</p>

			<ul>
				<li><span class="bld">SOPC Builder</span>, инструмент, который устраняет задачи ручной 
					системной интеграции, автоматически генерируя логику межсоединений 
					и создавая тестовую среду для проверки функциональности.
				</li>
				<li><span class="bld">Qsys</span>, инструмент системной интеграции, являющийся следующим поколением 
					SOPC Builder. Он использует оптимизированную FPGA архитектуру сети на кристалле, 
					которая удваивает производительность fMAX по сравнению с SOPC Builder.
				</li>
				<li><span class="bld">SoCEDS</span>, набор инструментов разработки, служебных программ, программ  в 
					реальном времени и примеров приложений, помогающих разрабатывать программное 
					обеспечение для встроенных систем SoC FPGA.
				</li>
				<li><span class="bld">DSP Builder,</span> инструмент, который создает плавный мост между инструментом 
					MATLAB / Simulink и программным обеспечением Quartus Prime, поэтому разработчики 
					FPGA имеют возможность разработки, моделирования и проверки алгоритмов инструментов 
					проектирования на системном уровне MATLAB / Simulink.
				</li>
				<li>Инструментарий интерфейса внешней памяти, который определяет проблемы калибровки и измеряет поля для каждого сигнала DQS.</li>
				<li>Создание файлов JAM / STAPL для программистов внутрисхемных устройств JTAG.</li>
				<li>Также поддерживает скриптовые сценарии на языке Tcl.</li>
			</ul>

			<p class="bld">SOPC Builder</p>

			<p>SOPC Builder (система на программируемом чип&ndash;билдере) &mdash; это программное обеспечение, 
				разработанное Intel, которое автоматизирует подключение программно&ndash;аппаратных компонентов 
				для создания полноценной компьютерной системы, работающей на любом из ее различных чипов 
				FPGA. SOPC Builder включает в себя библиотеку готовых компонентов (включая флагманский 
				программный процессор Nios&nbsp;II, контроллеры памяти, интерфейсы и периферийные устройства) 
				и интерфейс для включения пользовательских компонентов. Соединения осуществляются через шину 
				Avalon. Арбитраж шины, согласование ширины шины и даже пересечение часового домена обрабатываются 
				автоматически, когда SOPC Builder генерирует систему. GUI &mdash; это единственная вещь, используемая 
				для настройки программно-аппаратных компонентов (которые часто имеют много опций) и для указания 
				топологии шины.
			</p>

			<div class="img">
				<img src="images/image4.jpg" alt="Внешний вид окна SOPC Builder">
				<p class="imgcaption">Рисунок 4 &mdash; Внешний вид окна SOPC Builder.</p>
			</div>

			<p>Получающаяся <q>виртуальная</q> система может быть затем подключена к внешнему миру через 
				программируемые контакты FPGA или подключена внутри к другим программным компонентам. 
				Контакты FPGA направляются на разъемы, такие как PCI или DDR, или, как это часто бывает 
				во встроенных системах, на другие чипы, установленные на той же плате.
			</p>
				
			<p>Использование ресурсов на FPGA, на которой размещена система SOPC Builder, 
				очень скромно по современным стандартам. Устройства FPGA, поддерживающие системы 
				SOPC, включают почти все FPGA Intel (и даже некоторые CPLD).
			</p>

			<p>САПР Quartus&ndash;Prime очень похож на Vivado Design Suite, за небольшим исключением, поэтому и их достоинства и недостатки подобны:</p>

			<ul><p><span class="underline">Достоинства:</span></p>
				<li>В Quartus&ndash;Prime также есть средства автоматизации процесса трассировки, размещения, временного анализа схем.</li>
				<li>Есть возможность создавать сценарии на языке Tcl для управления процессом разработки.</li>
				<li>Quartus&ndash;Prime может взаимодействовать с MATLAB / Simulink для создания и моделирования работы схемы.</li>
				<li>Проектировщик имеет возможность использовать различные методологии при разработке схемы: RTL&ndash;описание, IP&ndash;ядра, языки описания аппаратуры.</li>
			</ul>

			<ul><p><span class="underline">Недостатки:</span></p>
				<li>Отсутствуют инструменты для создания схем с помощью высокоуровневого синтеза на языках C, C++.</li>
				<li>Нет возможности задания алгоритма проектирования как методики проектирования 
					определённого класса устройств с последующим повторным использованием этого алгоритма.</li>
				<li>Для работы с САПР Quartus&ndash;Prime проектировщик должен обладать высоким уровнем знания предметной области.</li>
			</ul>

			<a name="p53"></a>

			<h3>5.3 Active-HDL от Aldec</h3>

			<p>Active&ndash;HDL &mdash; среда разработки ПЛИС, построенная на общем ядре симулятора HDL. 
				Поддерживает инструменты ввода и отладки текстового и графического дизайна, 
				обеспечивает симуляцию на разных языках (VHDL / Verilog / EDIF / SystemC / SystemVerilog) 
				и предоставляет унифицированный интерфейс для различных инструментов синтеза и реализации. 
				Также поддерживает проверку на основе утверждений с помощью утверждений Open Vera, PSL или 
				Systemverilog Assertion. Доступны специальные версии программного обеспечения, которые 
				поддерживают только одного поставщика ПЛИС, например, Active&ndash;HDL Lattice Edition.
			</p>

			<ul><p><span class="underline">Достоинства:</span></p>
				<li>Наличие таких инструментов как Language Assistant и IP Core Generator для синтеза VHDL и Verilog кода.</li>
				<li>Есть инструменты для автоматизированной трассировки, размещения, временного анализа схем.</li>				
			</ul>

			<ul><p><span class="underline">Недостатки:</span></p>
				<li>Отсутствуют инструменты для создания схем с помощью высокоуровневого синтеза на языках C, C++.</li>
				<li>Нет возможности задания алгоритма проектирования как методики проектирования 
					определённого класса устройств с последующим повторным использованием этого алгоритма.</li>
				<li>Для работы с САПР Active&ndash;HDL проектировщик должен обладать высоким уровнем знания предметной области.</li>
			</ul>


			<a name="p6"></a>

			<h2>6. Анализ способов создания машин логического вывода.</h2>

			<a name="p61"></a>

			<h3>6.1 CLIPS</h3>

			<p>CLIPS &mdash; программная среда для разработки экспертных систем. Синтаксис и название 
				предложены Чарльзом Форги (Charles Forgy) в OPS (Official Production System). 
				CLIPS является продукционной системой. Реализация вывода использует алгоритм Rete.
			</p>
			<p>Основная идея состоит в представлении знаний в виде такой формы:</p>

			<div class="img">
				<img src="images/image5_ru.jpg" alt="Представление знаний в CLIPS">
				<p class="imgcaption">Рисунок 5 &mdash; Представление знаний в CLIPS.</p>
			</div>

			<p>Такое представление близко к человеческому мышлению и отличается от программ, 
				написанных на традиционных алгоритмических языках, где действия упорядочены и выполняются строго придерживаясь алгоритма.
			</p>

			<p>CLIPS является одной из наиболее широко используемых инструментальных сред 
				для разработки экспертных систем благодаря своей скорости, эффективности и 
				бесплатности. Являясь общественным достоянием, она до сих пор обновляется и 
				поддерживается своим изначальным автором, Гэри Райли (Gary Riley).
			</p>

			<p>CLIPS включает полноценный объектно&ndash;ориентированный язык COOL для написания экспертных систем. 
				Хотя она написана на языке Си, её интерфейс намного ближе к языку программирования LISP. 
				Расширения можно создавать на языке Си, кроме того, можно интегрировать CLIPS в 
				программы на языке Си&nbsp;<a href="#ref9">[9]</a>.
			</p>

			<p>CLIPS разработан для применения в качестве языка прямого логического вывода (forward chaining) 
				и в своей оригинальной версии не поддерживает обратного вывода (backward chaining).
			</p>

			<p>Как и другие экспертные системы, CLIPS имеет дело с правилами и фактами.</p>

			<p class="bld">Факты.</p>

			<p>Информация, на основании которой экспертная система делает логический вывод, 
				называется фактами. В CLIPS есть 2 вида фактов: <span class="itl">упорядоченные</span> и <span class="itl">шаблонные</span>. 
				Шаблонные факты имеют шаблон, задаваемый конструкцией deftemplate. Упорядоченные 
				не имеют явной конструкции deftemplate, однако она подразумевается. Шаблонный факт 
				напоминает структуру в языке C или запись в языке Pascal, поля называются слотами 
				и объявляются конструкцией slot.
			</p>

			<p class="bld">Правила.</p>

			<p>Знания предметной области представляются в CLIPS в виде правил, которые имеют следующую структуру:</p>

			<div class="img">
				<img src="images/image6_ru.jpg" alt="Правила в Clips.">
				<p class="imgcaption">Рисунок 6 &mdash; Правила в Clips.</p>
			</div>
			
			<p>Левая часть правила &mdash; это условие его срабатывания, а правая часть — это те действия, 
				которые должны выполниться в случае выполнения условий. Знак => специальный символ, 
				разделяющий LHS и RHS. Правила объявляются с помощью команды defrule.
			</p>

			<a name="p62"></a>

			<h3>6.2 Protege</h3>
			
			<p>Protege &mdash; это свободный, открытый редактор онтологий и фреймворк для построения баз знаний.</p>

			<p>Платформа Protege поддерживает два основных способа моделирования онтологий посредством 
				редакторов Protege&ndash;Frames и Protege&ndash;OWL. Онтологии, построенные в Protege, могут быть 
				экспортированы во множество форматов, включая RDF (RDF Schema), OWL и XML Schema. Protege 
				имеет открытую, легко расширяемую архитектуру за счёт поддержки модулей расширения функциональности.
			</p>

			<p>Protege поддерживается значительным сообществом, состоящим из разработчиков и 
				учёных, правительственных и корпоративных пользователей, использующих его для 
				решения задач, связанных со знаниями, в таких разнообразных областях, как биомедицина, 
				сбор знаний и корпоративное моделирование.
			</p>

			<p class="bld">Редактор Protege&ndash;Frames</p>

			<p>Редактор Protege&ndash;Frames позволяет пользователям строить и заполнять онтологии, 
				основанные на фреймах, в соответствии с OKBC (Open Knowledge Base Connectivity 
				protocol &mdash; прикладной интерфейс программирования для доступа к базам знаний систем 
				представления знаний). В этой модели онтология состоит из набора классов, 
				организованных в категоризованную иерархию, для представления важных понятий области, 
				набора слотов, связанных с классами для описания их свойств и отношений между ними, 
				и набора экземпляров этих классов &mdash; отдельных экземпляров понятий, которые имеют 
				определенные значения своих свойств.
			</p>

			<p class="bld">Редактор Protege&ndash;OWL</p>

			<p>Редактор Protege&ndash;OWL позволяет пользователям строить онтологии для семантической 
				паутины, в частности на OWL. OWL&ndash;онтология может включать описания классов, свойств 
				и их экземпляров. Давая такую онтологию, формальная семантика OWL определяет как 
				получать логические следствия, т.е. факты, которые не присутствуют непосредственно 
				в онтологии, но могут быть выведены из существующих посредством семантики. Эти 
				выводы могут быть основаны на одном документе или на множестве распределенных 
				документов, которые были объединены с использованием определенных механизмов OWL.
			</p>

			<a name="p63"></a>

			<h3>6.3 Использование ТМО для организации логического вывода.</h3>

			<p>Использование Теоретико&ndash;множественных операций (ТМО) для организации логического 
				вывода было подробно описано в работах А.В.&nbsp;Григорьева&nbsp;<a href="#ref10">[10&ndash;12]</a>.
			</p>

			<p>Коротко представить принцип работы машины логического вывода, основанной на ТМО можно следующим образом:</p>

			<ul>
				<li>Выполняются (ТМО) над имеющимися прототипами как совокупностями структурных компонент, имеющими те или иные признаки.</li>
				<li>Классификация отдельного уровня есть И&ndash;ИЛИ&ndash;дерево, где каждый узел имеет список прототипов, имеющих данный признак (<q>вход&ndash;выход</q>).</li>
				<li>Поиск требуемого решения (прототипа) выполняется путём диалога, где каждый шаг предполагает выбор конкретного ИЛИ&ndash;узла с последующим продолжением диалога.</li>
				<li>После шага выбора происходит сужение оставшихся в рассмотрении прототипов, а также удаление тех ИЛИ&ndash;узлов, где число прототипов дошло до 0.</li>
			</ul>

			<a name="p7"></a>

			<h2>7.	Постановка задачи и описание разрабатываемой надстройки </h2>

			<p>Так как во всех рассмотренных САПР есть такие недостатки как: 1) отсутствие возможности 
				задания алгоритма проектирования как методики проектирования определённого класса устройств 
				с последующим повторным использованием этого алгоритма; 2) высокие требования к уровню знания 
				проектировщиком предметной области; то возникает соответствующая задача: создать программную 
				надстройку над САПР FPGA для возможности создания алгоритма проектирования для его многократного использования.
			</p>

			<p>Разрабатываемое ПО должно соответствовать следующим требованиям:</p>

			<ol>
				<li>Программная надстройка создаётся с целью обобщения пользовательского опыта, 
					который в дальнейшем будет использован для создания новых продуктов. Следовательно, 
					на вход системы должны подаваться существующие библиотеки компонентов. 
					Предполагается, что они уже отлажены и не нуждаются в проверке.
				</li>
				<li>Надстройка должна упростить процесс проектирования путём его автоматизации.</li>
				<li>Система должна снизить требования к уровню знаний проектировщика.</li>
				<li>Процесс работы программной надстройки заключается в том, что она при помощи диалога 
					с пользователем узнаёт нужные ему структурные компоненты, и на основании этой 
					информации выдаёт ему необходимую схему в виде VHDL кода или ссылки на схему.
				</li>
				<li>Логический вывод программы должен быть организован при помощи ТМО. Выбор в пользу этого похода сделан по следующим причинам:
					<ol>
						<li>При использовании таких пакетов как CLIPS и Protege повышаются требования к проектировщику в области организации знаний.</li>
						<li>Кроме того, возникает необходимость настройки программного взаимодействия между Clips/Protege и надстройкой над САПР.</li>
						<li>Подход с применением ТМО требует от нас только программной реализации самого подхода. </li>
					</ol>
				</li>
				<li>Система должна реализовывать так называемый подход <q>глупого эксперта</q>&nbsp;<a href="#ref13">[13]</a>. 
					<q>Глупый эксперт</q> &mdash; это проектировщик, у которого отсутствуют навыки в области 
					организации знаний.  В таком случае сама система берёт на себя всю работу по 
					организации знаний (обучение, построение дерева решений, логический вывод).
				</li>
				<li>Система должна быть реализована в качестве надстройки над САПР Vivado Design Suite, 
					поскольку он является наиболее продвинутым из всех рассмотренных пакетов и одним из 
					наиболее популярных среди проектировщиков.
				</li>
			</ol>

			<a name="p8"></a>

			<h2>Выводы</h2>
			
			<p>В результате научно&ndash;исследовательской работы были собраны и изучены материалы по вопросам, связанным с темой магистерской работы.
			</p>
			
			<p>В исследовании были проанализированы существующие САПР РЭА, методы создания 
				машин логического вывода, описана структура разрабатываемого программного продукта.
			</p>
					        
			<p>Автоматизация процесса проектирования является актуальной задачей, поскольку 
				позволит существенно сократить время разработки конечного продукта. Кроме того 
				на сегодняшний день она полностью не реализована, и тот кто сделает это первым 
				будет иметь существенное преимущество над конкурентами.
			</p>
			
			<a name="ref"></a>

			<h2>Список источников</h2>

			<ol>
				<li><a name="ref1"></a>Хвищук,&nbsp;А.Ю. Современные средства генерирования VHDL описаний аппаратуры при проектировании программируемых схем FPGA / Хвищук&nbsp;А.Ю., Григорьев&nbsp;А.В. // Микроелектроника и информатика &mdash; 2018. 25&ndash;я Всеросийская межвузовская научно&ndash;техническая конференция студентов и аспирантов: тезисы докладов. &mdash; М.:МИЭТ, 2018. &mdash; 316 с.</li>
				<li><a name="ref2"></a>Automated sports rim design in CAD system [Электронный ресурс] // IEEE Xplore Digital Library. &mdash; Режим доступа: <a href="https://ieeexplore.ieee.org/document/8376856/" target="_blank">https://ieeexplore.ieee.org/document/8376856/</a> &mdash; Загл. с экрана.</li>
				<li><a name="ref3"></a>A Methodology of Knowledge Management Based on Ontology in Collaborative Design [Электронный ресурс] // IEEE Xplore Digital Library. &mdash; Режим доступа: <a href="https://ieeexplore.ieee.org/document/4739796" target="_blank">https://ieeexplore.ieee.org/document/4739796</a> &mdash; Загл. с экрана.</li>
				<li><a name="ref4"></a>Базы знаний интеллектуальных систем / Т.А.&nbsp;Гаврилова, В.Ф.&nbsp;Хорошевский &mdash; СПб: Питер, 2000. &mdash; 384 с.</li>
				<li><a name="ref5"></a>Исследование способов организации построения инструментальной интеллектуальной оболочки для проектирования сложных объектов на базе экспертных методик [Электронный ресурс] // Портал магистров ДонНТУ. &mdash; Режим доступа: <a href="http://masters.donntu.org/2009/fvti/malyavka/diss/index.htm" target="_blank">http://masters.donntu.org/2009/fvti/malyavka/diss/index.htm</a> &mdash; Загл. с экрана.</li>
				<li><a name="ref6"></a>Процесс проектирования цифровых устройств с использованием ПЛИС [Электронный ресурс] // Электронная Образовательная Система МГТУ им. Н.Э.Баумана &mdash; Режим доступа: <a href="http://e-learning.bmstu.ru/moodle/pluginfile.php/2910/mod_resource/content/3/%D0%AD%D0%92%D0%9C_5.pdf" target="_blank">http://e-learning.bmstu.ru/moodle/pluginfile.php/2910/mod_resource/content/3/%D0%AD%D0%92%D0%9C_5.pdf</a> &mdash; Загл. с экрана.</li>
				<li><a name="ref7"></a>Wikipedia contributors. (2018, December 26). Xilinx Vivado. In Wikipedia, The Free Encyclopedia. Retrieved 23:09, January 8, 2019, from <a href="https://en.wikipedia.org/w/index.php?title=Xilinx_Vivado&oldid=875403824" target="_blank">https://en.wikipedia.org/w/index.php?title=Xilinx_Vivado&oldid=875403824</a> &mdash; Загл. с экрана.</li>
				<li><a name="ref8"></a>Wikipedia contributors. (2018, November 22). Intel Quartus Prime. In Wikipedia, The Free Encyclopedia. Retrieved 23:12, January 8, 2019, from <a href="https://en.wikipedia.org/w/index.php?title=Intel_Quartus_Prime&oldid=870064844" target="_blank">https://en.wikipedia.org/w/index.php?title=Intel_Quartus_Prime&oldid=870064844</a> &mdash; Загл. с экрана.</li>
				<li><a name="ref13"></a>CLIPS [Электронный ресурс] : Материал из Википедии &mdash; свободной энциклопедии : Версия 95978215, сохранённая в 12:57 UTC 29 октября 2018 / Авторы Википедии // Википедия, свободная энциклопедия. &mdash; Электрон. дан. &mdash; Сан-Франциско: Фонд Викимедиа, 2018. &mdash; Режим доступа: <a href="https://ru.wikipedia.org/?oldid=95978215" target="_blank">https://ru.wikipedia.org/?oldid=95978215</a> &mdash; Загл. с экрана.</li>
				<li><a name="ref9"></a>Григорьев&nbsp;А.В. Методы поиска новых решений в специализированной инструментальной оболочке для создания интеллектуальных САПР // Десятая национальная конференция по искусственному интеллекту с международным участием КИИ&ndash;2006 (25&ndash;28 сентября 2006г., Обнинск): Труды конференции. &mdash; №. 3. &mdash; С. 1031&ndash;1046.</li>
				<li><a name="ref10"></a>Григорьев&nbsp;А.В. Теоретико&ndash;множественные операции над грамматиками как инструментарий для построения интеллектуальных САПР // XIII национальная конференция по искусственному интеллекту с международным участием КИИ&ndash;2012 (16&ndash;20 октября 2012 г., Белгород, Россия): Труды конференции. В 4&ndash;т., Белгород: Изд&ndash;во БГТУ, 2012, Т.3, с.202&ndash;209</li>
				<li><a name="ref11"></a>Григорьев&nbsp;А.В., Каспаров&nbsp;А.А. И/ИЛИ-ДЕРЕВО КАК СРЕДСТВО АБСТРАКТНОГО ПРЕДСТАВЛЕНИЯ БАЗЫ ЗНАНИЙ. &mdash; 2002.</li>
				<li><a name="ref12"></a>Григорьев&nbsp;А.В. Пути создания интеллектуальных САПР при различных уровнях квалификации экспертов //Донецк: ИПИИ МОН и НАН Украины <q>Наука и образование</q>. &mdash; 2005. &mdash; С. 758&ndash;763.</li>
			</ol>
		
		</div> <!-- maintext -->
	
	</div> <!-- middleblock -->

	<div id="menub">
		<a class="mitemb" href="../index.htm">Резюме</a>
		<a class="mitemb" href="../bio/index.htm">Биография</a>
		<a class="mitemb" href="../library/index.htm">Библиотека</a>
		<a class="mitemb" href="../links/index.htm">Ссылки</a>
		<a class="mitemb" href="../links/zvit.htm">Отчет о поиске</a> 
		<a class="mitemb" href="../ind/index.htm">Индивидуальный раздел</a>
	</div>
</div>
</body>
</html>
