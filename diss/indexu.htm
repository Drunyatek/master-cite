<!DOCTYPE HTML>
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
  <title>Реферат&mdash;Дослідження методів створення алгоритмів синтезу програм на основі мов опису апаратури в САПР обчислювальної техніки&mdash;Хвищук Андрій Юрійович</title>
  <link rel="stylesheet" type="text/css" href="../css/master_style.css">
</head>

<body lang="ua">
<div class="container">
	<div id="topblock">
		<div id="langbox">
			<a href="index.htm">Ru</a> &nbsp; 
			<a href="indexe.htm">En</a> 
		</div>
		<div id="donntu">
			<a href="http://donntu.org/index.php?lang=ukr" target=_blank>ДонНТУ</a> &nbsp; 
			<a href="http://masters.donntu.org/indexu.htm" target=_blank>Портал магістрів</a>
		</div>
	</div>

	<div id="header">
			<div id="photomag">
				<a href="../khvishuk_big.jpg"><img src="../photo.jpg" title="Магістр ДонНТУ Хвищук Андрій Юрійович" alt="Магістр ДонНТУ Хвищук Андрій Юрійович"></a>
			</div>
			<div id="headertext">
				<h1 class="hdr">Хвищук Андрій Юрійович</h1>
				<h3 class="hdr">Факультет комп'ютерних наук та технологій</h3>
				<h3 class="hdr">Кафедра програмної інженерії</h3>
				<h3 class="hdr">Спеціальність <q>Системи автоматизованого проектування</q></h3>
				<h2 class="hdr">Дослідження методів створення алгоритмів синтезу програм на основі мов опису апаратури в САПР обчислювальної техніки</h2>
				<h3 class="hdr">Науковий керівник: д.т.н., проф. Григор'єв Олександр Володимирович</h3>
			</div>
		</div>

	<div id="middleblock">
	
		<div id="menu">
			<a class="button color" href="../indexu.htm">Резюме</a>
			<a class="button color" href="../bio/indexu.htm">Біографія</a>
			<a class="button colorfix">Реферат</a>
		</div>
	
		<div id="maintext">
		
			<h2>Реферат за темою випускної роботи</h2>
			
			<div class = "comment">
				<P> При написанні даного реферату магістерська робота ще не завершена. Остаточне завершення: червень 2019 року. Повний текст роботи та матеріали по темі можуть бути отримані у автора або його керівника після зазначеної дати. </ P>
			</div>
			<h2>Зміст</h2>
			<ul class=content>
				<li class=ct1><a href="#p0">Вступ</a>
				<li class=ct1><a href="#p1">1. Актуальність теми</a>
				<li class=ct1><a href="#p2">2. Мета і задачі дослідження та заплановані результати</a>
				<li class=ct1><a href="#p3">3. Огляд досліджень та розробок</a>
				<li class=ct2><a href="#p31">3.1 Огляд міжнародних джерел</a>
				<li class=ct2><a href="#p32">3.2 Огляд національних джерел</a>
				<li class=ct2><a href="#p33">3.3 Огляд локальних джерел</a>
				<li class=ct1><a href="#p4">4. Процес проектування ПЛІС з використанням FPGA</a>
				<li class=ct1><a href="#p5">5. Аналіз існуючих САПР</a>
				<li class=ct1><a href="#p5">5.1 Vivado від Xilinx</a>
				<li class=ct1><a href="#p5">5.2 Quartus&mdash;Prime від Altera Intel</a>
				<li class=ct1><a href="#p5">5.3 Active&ndash;HDL від Aldec</a>
				<li class=ct1><a href="#p5">6. Аналіз способів створення машин логічного висновку</a>
				<li class=ct1><a href="#p5">6.1 CLIPS</a>
				<li class=ct1><a href="#p5">6.2 Protege</a>
				<li class=ct1><a href="#p5">6.3 Використання ТМО для організації логічного висновку</a>
				<li class=ct1><a href="#p5">Постановка завдання і опис розробляємої надбудови</a>
				<li class=ct1><a href="#p5">Висновки</a>
				<li class=ct1><a href="#ref">Перелік посилань</a>
			</ul>
			
			<a name="p0"></a>
			<h2>Вступ</h2>
			
			<p>
				На сьогоднішній день проектування ПЛІС є однією з найбільш швидко зростаючих предметних областей. 
				Це обумовлено тим, що кількість різних гаджетів, для яких і потрібні чіпи, тільки росте, і з кожним
				роком тільки сильніше. Необхідність забезпечувати ринок за потрібне обсягом продукції змушує інженерів 
				зменшувати час виготовлення кінцевого продукту, і, як наслідок цього, автоматизувати процес проектування.
			</p>
			
			<p> 
				Ефективність процесів проектування в будь&mdash;яких предметних областях багато в чому визначається наявністю і 
				ступенем розвитку засобів, що дозволяють проектувальнику формалізувати і повторно використовувати експертні 
				методики для проектування тих чи інших виробів. Методики проектування покликані істотно спростити проектувальнику 
				рішення задачі проектування, виходячи з вимог технічного завдання на виріб (ТЗ). Такі інструментальні засоби 
				дозволяють створювати методики проектування, зберігати їх, редагувати і&mdash;застосовувати в міру потреби. Ефект в 
				цьому випадку полягає в скороченні часу і трудомісткості процесу прийняття проектних рішень.
			</p>
			
			<a name="p1"></a>
			<h2>1. Аактуальність</h2>
			
			<p>
				При проектуванні ПЛІС інженери використовують самі передові програмні комплекси, 
				які беруть на себе такі трудомісткі операції як трасування схеми, часовий аналіз, 
				перевірка на невідповідності і помилки і т.п. Але для роботи з будь&mdash;яким з пакетів, які 
				зараз існують на ринку, проектувальник і раніше повинен мати високий рівень знань предметної 
				області. Крім того, для провідних компаній в сфері проектування обчислювальної техніки (і не 
				тільки для них) має місце проблема: «Як зберегти знання і досвід співробітників?» І, 
				більш того: «Як отримати з цього практичну користь?».</q>.
			</p>
			
			<p>У зв'язку з цим виникає наступна задача: створення бази знань проектування ПЛІС. 
				База знань, на даний момент, є найсучаснішим і технологічним рішенням в області 
				зберігання даних. Вона дозволить не тільки зберегти накопичений роками досвід 
				співробітників, але і зможе застосувати його для синтезу нових продуктів &nbsp;<a href="#ref1">[1]</a>.</p>
			
			<a name="p2"></a>
			<h2>2. Мета і задачі дослідження та заплановані результати</h2>
			
			<p>Метою дослідження даної роботи є:</p>
			<ol>
				<li>Проаналізувати існуючі САПР FPGA і виявити їх основні позитивні якості;</li>
				<li>Проаналізувати існуючі підходи для створення машин логічного висновку;</li>
				<li>Вибрати кращий підхід для реалізації бази знань і обгрунтувати рішення.</li>
				<li>Описати структуру розроблюваного програмного продукту.</li>
			</ol>
			<p><span class="itl">Об'єктом дослідження</span> даної роботи є практична реалізація бази знань у вигляді надбудови над САПР РЕА.</p>

			<a name="p3"></a>
			<h2>3. Огляд досліджень та розробок</h2>

			<a name="p31"></a>
			<h3>3.1 Огляд міжнародних джерел</h3>

			<p>
				В роботі <q>Automated sports rim design in CAD system</q> M.S.&nbsp;Abdul Karim и Ahmad&nbsp;Zulhakim Ab&nbsp;Rashid&nbsp;<a href="#ref2">[2]</a>
				дослідні затишок шляху створення автомат ізації на етапі проектування для скорочення часу на 
				проектування в рамках пакета автоматизованого проектування (САПР). Вияснілось, що одним з 
				найбільш ефективних спосо бов реалізації автоматизації в проектуванні є автоматизація повторюваних 
				кроків, які необхідно виконувати при кожному створенні деталі. Цей проект був націлений на розробку 
				способу автоматизації повторюваних кроків, і було проведено тематичне дослідження конструкції обода колеса.
			</p>
			<p>В роботі <q>A Methodology of Knowledge Management Based on Ontology in Collaborative Design</q>
				Junming&nbsp;Hou, Chong&nbsp;Su, Yingying&nbsp;Su, Wanshan&nbsp;Wang&nbsp;<a href="#ref3">[3]</a> запропонована 
				методологія управління знаннями в спільному дизайні, представляються концепції спільного проектування і 
				управління знаннями, а також вводиться вираз знань, засноване на онтології.
			</p>
			
			<a name="p32"></a>
			<h3>3.2  Огляд національних джерел</h3>
			
			<p>Книга <q>Базы знаний интеллектуальных систем</q> Т.А.&nbsp;Гаврилової, В.Ф.&nbsp;Хорошевського&nbsp;<a href="#ref4">[4]</a> є учібником 
				для технічних вузів по вхідних в різні дисципліни питанням розробки інтелектуальних систем. Актуальність 
				предмета визначається зростаючим застосуванням інженерії знань і системного аналізу в р азлічних областях діяльності.
			</p>
			
			<p>Особливістю викладу є його практична спрямованість: освоєння наявного матеріалу достатньо для початку самостійної роботи над створенням інтелектуальної системи, заснованої на знаннях.
			</p>
			
			<p>У підручнику враховано все зростаюча роль Інтернету, і тому детально розглядається застосування інженерії знань в Мережі.</p>
			
			<a name="p33"></a>
			<h3>3.3 Огляд локальних джерел</h3>
			
			<p>Серед магістрів ДонНТУ можна виділити наступні публікації.</p>
			
			<p>У магістерській роботі О.В.&nbsp;Малявки <q>Исследование способов организации построения 
				инструментальной интеллектуальной оболочки для проектирования сложных объектов на 
				базе экспертных методик</q>&nbsp;<a href="#ref5">[5]</a> проведений аналіз існуючих інструментальних 
				засобів створення САПР, вдосконалені існуючі алгоритми. Здійснено оцен ка їх ефективності і побудований з їх допомогою інструментарій для автоматизації створення проблемно-орієнтованих САПР.
			</p>
			
			<a name="p4"></a>
			<h2>4. Процес проектування ПЛІС з використанням FPGA</h2>
						
			<p>Проектування цифрових устрій ств пр едставляет з себе ітераційний процес, заснований на принципах функціональної декомпозиції&nbsp;<a href="#ref6">[6]</a>. Проектування традиційно поділяють на етапи:</p>
				<ul>
					<li>системний,</li>
					<li>структурно-алгоритмічний,</li>
					<li>функціонально-логічний,</li>
					<li>конструкторсько-технологічний.</li>
				</ul>
			
			<p><span class="underline">На системному етапі</span>весь проект розбивається на частини, визначаються їх призначення і взаємозв'язок, приймається рішення про способи реалізації частин. Рішення про використання ПЛІС, прийняте на системному етапі, дозволяє виконувати конструкторсько-технологічне проектування модуля верхнього рівня паралельно з виконанням інших етапів.</p>
			
			<p><span class="underline">Структурно-алгоритмічний і функціонально&ndashлогічний етапи</span> проектування на ПЛІС являють собою ітераційний процес введення описів з подальшою їх верифікацією.</p>
			
			<p>Сучасні САПР підтримують кілька способів опису пристрою:</p>
						
			<ul>
				<li>Опис з використанням мов опису апаратних засобів (VHDL, Verilog, AHDL та інших) за допомогою специализир ованного текстового редактора.</li>
				<li>Схемотехнічний спосіб за допомогою програми візуального проектування, в якій розробник поміщає на робочу область функціональні блоки і виробляє їх з'єднання. Після закінчення візуального проектування схема прео Бразил в мовне опис.</li>
				<li>Графічне представлення цифрових автоматів в спеціалізованому редакторі, що забезпечує перетворення отриманого графічного перед дання в мовне опис.</li>
				<li> Опис комбінаційної логіки за допомогою таблиць істинності, карт Карно, функцій алгебри логіки.</li>
			</ul>

			<p><span class="undeline">Конструкторсько-технологічний етап</span> проектування з використанням ПЛІС розділяється на пов'язані підзадачі:</p>

			<ul>
				<li>Синтез (Synthesis).</li>
				<li>Глобальне розміщення (Mapping)</li>
				<li>Локальне розміщення (Placement).</li>
				<li>Трасування (Routing).</li>
			</ul>
			
			<p><span class="underline">Синтез (Synthesis)</span> &mdash; відображення схеми в базис логічних ресурсів ПЛІС. Мета синтезу&mdash;перетворення вихідного схемотехнического або високорівневого опису пристрою в опис, оптимально реалізується на обраної ПЛІС, а також придатне для подальшого розміщення і трасування.</p>
			
			<p><span class="underline">Глобальне розміщення (Mapping)</span> &mdash; призначення частин схеми макрообластей ПЛІС, що представляють собою групи сусідніх логічних блоків, макроячеек і блоків введення / виводу. Мета глобального розміщення: створення найкращих умов для локального розміщення і трасування. Для досягнення цього використовується інформація про призначення сигналів зовнішніх висновків, великою мірою впливає на призначення вільних областей ПЛІС частинах схеми. Як правило, призначення логічних ресурсів кристала макрообластям виробляють з надмірністю, що полегшує подальшу трасування.</p>
			
			<p><span class="underline">Локальне розміщення (Placement)</span> &mdash; детальне призначення логічних ресурсів макрообластей, обраних на стадії глобального розміщення, частинам схеми. При цьому переслідуються мети: рівномірне заповнення макрообластей елементами і трасами, мінімізація сумарної довжини ліній зв'язку та інші. Основна мета локального розміщення&mdash;створення найкращих умов для трасування.</p>
			
			<p><span class="underline">Трасування (Routing) </span> &mdash; визначення зв'язків між логічними блоками, макроячейками і блоками вводу-виводу у вигляді комутованих ділянок трас. На даній стадії переслідуються мети: вибору трас, що забезпечують заданий час поширення сигналу; мінімізації сумарної кількості програмованих точок зв'язку; мінімізація часу поширення сигналу по найдовшій лінії зв'язку. Важливим завданням стадії трасування є визначення часових параметрів отриманого варіанту пристрою і порівняння їх із заданими обмеженнями.</p>

			<p>Процес проектування є ітераційним. Після виконання кожної стадії проводиться верифікація отриманого опису, для чого застосовуються різні засоби моделювання та аналізу. У сучасних САПР зазвичай передбачається моделювання на наступних етапах:</p>

			<ul>
				<li>Моделювання поведінкового опису.</li>
				<li>Моделювання опису на мові реєстрових передач.</li>
				<li>Моделювання технологічне кого опису (після синтезу).</li>
				<li>Моделювання на вентильному рівні.</li>
				<li>Моделювання після розміщення.</li>
				<li>Моделювання після трасування.</li>
			</ul>
						
			<a name="p5"></a>

			<h2>5. Аналіз існуючих САПР</h2>

			<a name="p51"></a>
			<h3>5.1 Vivado від Xilinx</h3>

			<p>Vivado Design Suite &mdash; це програмний пакет, розроблений Xilinx для синтезу та аналізу HDL проектів, який замінює Xilinx ISE додатковими функціями для розробки систем на чіпах (System on Chip, SoC) і високий оуровневого синтезу (High&mdash;Level Synthesis). На відміну від ISE, який використовував для моделювання ModelSim, Vivado System Edition включає вбудований логічний симулятор&nbsp;<a href="#ref7">[7]</a>.</p>

			<p>Vivado дозволяє розробникам синтезувати проекти, виконувати часовий аналіз, вивчати RTL-діаграми, моделювати реакцію проекту на різноманітні впливи і налаштовувати цільовий пристрій за допомогою програміста. Vivado&mdash;це середовище розробки продуктів FPGA від Xilinx, тісно пов'язана з архітектурою таких чіпів, і її не можна використовувати з продуктами FPGA інших виробників.</p>

			<p>До складу Vivado входять наступні компоненти:</p>

			<ul>
				<li><span class="bld">Компілятор Vivado High-Level Synthesis</span> дозволяє описувати схеми на C, C ++ і SystemC для пристроїв Xilinx без необхідності створювати RTL вручну. Vivado HLS широко розглядається для підвищення продуктивності праці розробників, і підтверджений про, що він підтримує класи C ++, шаблони, функції і перевантаження операторів. У Vivado 2014.1 з'явилася підтримка автоматичного перетворення ядер OpenCL в IP для пристроїв Xilinx. Ядра OpenCL&mdash;це програми, які виконуються на різних платформах CPU, GPU і FPGA.
				</li>
				
				<div class="img">
					<img src="images/image1.gif" alt="Спрощений маршрут проектування в Vivado HLS.">
					<p class="imgcaption">Рисунок 1 &mdash; Спрощений маршрут проектування в Vivado HLS.</p>
					<p class="imgcaption">(анімация: 8 кадрів, затримка 2 с, 8 циклів повторення, 39,8 КБ)</p>
				</div>

				<li><span class="bld">Vivado Simulator</span> &mdash; симулятор скомпільованої мови, який підтримує змішані мови, сценарії TCL, зашифрований IP і розширену перевірку.
				</li>

				<div class="img">
					<img src="images/image2.jpg" alt="Приклад симуляції в Vivado Similator.">
					<p class="imgcaption">Рисунок 2 &mdash; Приклад симуляції в Vivado Similator.</p>
				</div>

				<li><span class="bld">Vivado IP Integrator</span> дозволяє інженерам швидко інтегрувати і налаштовувати IP з великою IP-бібліотеки Xilinx. Інтегратор також налаштований для проектів MathWorks Simulink, створених за допомогою системного генератора Xilinx і високорівневого синтезу Vivado.
				</li>

				<div class="img">
					<img src="images/image3.jpg" alt="Процес проектування з використанням Vivado IP Integrator.">
					<p class="imgcaption">Рисунок 3 &mdash; Процес проектування з використанням Vivado IP Integrator.</p>
				</div>

				<li><span class="bld">Vivado TCL Store</span> &mdash; це система сценаріїв для розробки доповнень до Vivado, і її можна використовувати для додавання і зміни можливостей Vivado. TCL розшифровується як Tool Command Language і є мовою сценаріїв, на якому заснований сам Viv ado. Всі базові функції Vivado можуть викликатися і управлятися через сценарії TCL.
				</li>
			</ul>

			<p>З усього вищесказаного можна виділити наступні переваги і недоліки САПР Vivado Design Suite:</p>

			<ul><p><span class="underline">Переваги:</span></p>
				<li>Наявність потужних інструментів для автоматизації процесу трасування, розміщення, тимчасового аналізу схем.</li>
				<li>Наявність інструментів для високорівневого синтезу схем на мовах С, С ++ і System&mdash;C.</li>
				<li>Можливість управління всім циклом розробки за допомогою скриптового мови Tcl.</li>
				<li>Можливість проектування схем за допомогою різних методологій: RTL&mdash;описів, IP&mdash;ядер, мов опису апаратури, синтезу високого рівня.</li>
			</ul>

			<ul><p><span class="underline">Недоліки:</span></p>
				<li>Немає можливості завдання алгоритму проектування як методики проектування певного класу пристроїв з подальшим повторним використанням цього алгоритму.</li>
				<li>Для роботи з САПР Vivado Design Suite проектувальник повинен мати високий рівень знання предметної області.</li>
			</ul>

			<a name="p52"></a>

			<h3>5.2 Quartus-Prime від Altera Intel</h3>

			<p>Intel Quartus&ndash;Prime &mdash; це програмне забезпечення для проектування програмованих логічних пристроїв, розроблене Intel; до придбання Intel Altera інструмент називався Altera Quartus II. Quartus Prime дозволяє аналізувати і синтезувати проекти HDL, що дозволяє розробнику скомпілювати проекти, виконати часовий аналіз, вивчити RTL&mdash;діаграми, змоделювати реакцію проекту на різноманітні впливи і налаштувати цільове пристрій за допомогою програміста. Quartus Prime включає в себе реалізацію VHDL і Verilog для опису апаратного забезпечення, візуального редагування логічних схем і моделювання векторних сигналів&nbsp;<a href="#ref8">[8]</a>.
			</p>

			<p>Quartus&ndash;Prime включає в себе такі программні функції</p>

			<ul>
				<li><span class="bld">SOPC Builder</span>, інструмент, який усуває завдання ручної системної інтеграції, автоматично генеруючи логіку межсоединений і створюючи тестову середу для перевірки функціональності.
				</li>
				<li><span class="bld">Qsys</span>, інструмент системної інтеграції, який є наступним поколінням SOPC Builder. Він використовує оптимізовану FPGA архітектуру мережі на кристалі, яка подвоює продуктивність fMAX в порівнянні з SOPC Builder.
				</li>
				<li><span class="bld">SoCEDS</span>, набір інструментів розробки, службових програм, програм в реальному часі і прикладів додатків, що допомагають розробляти програмне забезпечення для вбудованих систем SoC FPGA.
				</li>
				<li><span class="bld">DSP Builder,</span> інструмент, який створює плавний міст між інструментом MATLAB / Simulink і програмним забезпеченням Quartus Prime, тому раз работчікі FPGA мають можливість розробки, моделювання та перевірки алгоритмів інструментів проектування на системному рівні MATLAB / Simulink.
				</li>
				<li>Інструментарій інтерфейсу зовнішньої пам'яті, який визначає проблеми калібрування і вимірює поля для кожного сигналу DQS.</li>
				<li>Створення файлів JAM / STAPL для програмістів внутрісхемних пристроїв JTAG.</li>
				<li>Також підтримує скріптові сценарії на мові Tcl.</li>
			</ul>

			<p class="bld">SOPC Builder</p>

			<p>SOPC Builder (система на програмованому чіп билдері) &mdash; це програмне забезпечення, розроблене Intel, яке автоматизує підключення програмно-апаратних компонентів для створення повноцінної комп'ютерної системи, що працює на будь-якому з її різних чіпів FPGA. SOPC Builder включає в себе бібліотеку готових компонентів (включаючи флагманський програмний процесор Nios II, контролери пам'яті, інтерфейси і периферійні пристрої) і інтерфейс для включення користувальницьких компонентів. З'єднання осуще ствляют через шину Avalon. Арбітраж шини, узгодження ширини шини і навіть перетин годинного домену обробляються автоматично, коли SOPC Builder генерує систему. GUI&mdash;це єдина річ, яка використовується для налаштування програмно-апаратних компонентів (які часто мають багато опцій) і для вказівки топології шини.
			</p>

			<div class="img">
				<img src="images/image4.jpg" alt="Зовнішній вигляд вікна SOPC Builder.">
				<p class="imgcaption">Рисунок 4 &mdash; Зовнішній вигляд вікна SOPC Builder.</p>
			</div>

			<p>Отримана «віртуальна» система може бути потім підключена до зовнішнього світу через програмовані контакти FPGA або підключена всередині до інших програмним компонентам. Контакти FPGA направляються на роз'єми, такі як PCI або DDR, або, як це часто буває у вбудованих системах, на інші чіпи, встановлені на тій же платі.
			</p>
				
			<p>Використання ресурсів на FPGA, на якій розміщена система SOPC Builder, дуже скромно за сучасними стандартами. Пристрої FPGA, що підтримують системи SOPC, включають майже всі FPG A Intel (і навіть деякі CPLD).
			</p>

			<p>САПР Quartus&mdash;Prime дуже схожий на Vivado Design Suite, за невеликим винятком, тому і їхні переваги й недоліки подібні:</p>

			<ul><p><span class="underline">Переваги:</span></p>
				<li> У Quartus&mdash;Prime також є засоби автоматизації процесу трасування, розміщення, тимчасового аналізу схем.</li>
				<li>Є можливість створювати сценарії на мові Tcl для управління процесом розробки.</li>
				<li>Quartus&mdash;Prime може взаємодіяти з MATLAB / Simulink для створення і моделювання роботи схеми.</li>
				<li>Проектувальник має можливість використовувати різні методології при розробці схеми: RTL&mdash;опис, IP&mdash;отрута р а, мови опису апаратури.</li>
			</ul>

			<ul><p><span class="underline">Недоліки:</span></p>
				<li>Відсутні інструменти для створення схем з допомогою високорівневого синтезу на мовах C, C ++.</li>
				<li>Немає можливості завдання алгоритму проектування як методики проектування певного класу пристроїв з подальшим повторним використанням цього алгоритму.</li>
				<li>Для роботи з САПР Quartus&mdash;Prime проектувальник повинен мати високий рівень знання предметної області.</li>
			</ul>

			<a name="p53"></a>

			<h3>5.3 Active-HDL від Aldec</h3>

			<p>Active -HDL&mdash;середовище розробки ПЛІС, побудована на загальному ядрі симулятора HDL. Підтримує інструменти введення і налагодження текстового і графічного дизайну, забезпечує симуляцію на різних мовах (VHDL / Verilog / EDIF / SystemC / SystemVerilog) і надає уніфікований інтерфейс для різних інструментів синтезу і реалізації. Також підтримує перевірку на основі тверджень за допомогою тверджень Open Vera, PSL або Systemverilog Assertion. Доступні спеціальні версії програмного забезпечення, які підтримують тільки одного постачальника ПЛІС, наприклад, Active -HDL Lattice Edition .
			</p>

			<ul><p><span class="underline">Переваги:</span></p>
				<li> Наявність таких інструментів як Language Assistant і IP Core Generator для синтезу VHDL і Verilog коду.</li>
				<li>Є інструменти для автоматизованої трасування, розміщення, тимчасового аналізу схем.</li>				
			</ul>

			<ul><p><span class="underline">Недоліки:</span></p>
				<li> Відсутні інструменти для створення схем з допомогою високорівневого синтезу на мовах C , C ++ .</li>
				<li>Немає можливості завдання алгоритму проектування як методики проектування певного класу пристроїв з подальшим повторним використанням цього алгоритму.</li>
				<li>Для роботи з САПР Active&mdash;HDL , як і з усіма попередніми, проектувальник повинен мати високий рівень знання предметної області.</li>
			</ul>


			<a name="p6"></a>

			<h2>6. Аналіз способів створення машин логічного висновку.</h2>

			<a name="p61"></a>

			<h3>6.1 CLIPS</h3>

			<p>CLIPS &mdash; програмне середовище для розробки експертних систем. Синтаксис і назва запропоновані Чарльзом Форг ( Charles Forgy ) в OPS ( Official Production System ). CLIPS є продукционной системою. Реалізація в Висновки використовує алгоритм Rete .
			</p>
			<p> Основна ідея полягає в поданні знань у вигляді такої форми : </p>

			<div class="img">
				<img src="images/image5_uk.jpg" alt="Подання знань в Clips">
				<p class="imgcaption">Рисунок 5 &mdash; Подання знань в Clips.</p>
			</div>

			<p> Таке уявлення близько до людського мислення і відрізняється від програм, написаних на традиційних алгоритмічних мовах, де дії впорядковані і виконуються строго дотримуючись алгоритму. 
			</p>

			<p>CLIPS є однією з найбільш широко використовуваних інструментальних середовищ для розробки експертних систем завдяки своїй швидкості, ефективності і безкоштовності. Будучи громадським надбанням, вона до цих пір оновлюється і підтримується своїм початковим автором, Гері Райлі ( Gary Riley ).
			</p>

			<p>CLIPS включає повноцінний об'єктно-орієнтована мова COOL для написання експертних систем. Хоча вона написана на мові Сі, її інтерфейс набагато ближче до мови програмування LISP. Розширення можна створювати на мові Сі, крім того, можна інтегрувати CLIPS в програми на мові Сі&nbsp;<a href="#ref9">[9]</a>.
			</p>

			<p>CLIPS розроблений для застосування в якості мови прямого логічного висновку ( forward chaining ) і в своїй оригінальній версії не підтримує обратн ого виведення ( backward chaining ).
			</p>

			<p>Як і інші експертні системи, CLIPS має справу з правилами та фактами.</p>

			<p class="bld">Факти.</p>

			<p> Інформація, на підставі якої експертна система робить логічний висновок, називається фактами. У CLIPS є 2 види фактів: впорядковані і шаблонні . Шаблонні факти мають шаблон, що задається конструкцією deftemplate . Впорядковані не мають явної конструкції deftemplate , проте вона мається на увазі. Шаблонний факт нагадує структуру в мові C або запис в мові Pascal , поля називаються слотами і оголошуються конструкцією slot . 
			</p>

			<p class="bld">Правила.</p>

			<p>Знання предметної області представляються в CLIPS у вигляді правил, які мають наступну структуру:</p>

			<div class="img">
				<img src="images/image6_uk.jpg" alt="Правила в Clips.">
				<p class="imgcaption">Рисунок 6 &mdash; Правила в Clips.</p>
			</div>
			
			<p>Ліва частина правила&mdash;це умова його спрацьовування, а права частина&mdash;це ті дії, які повинні виконатися в разі виконання умов. Знак => спеціальний символ, що розділяє LHS і RHS. Правила оголошуються за допомогою команди defrule .
			</p>

			<a name="p62"></a>

			<h3>6.2 Protege</h3>
			
			<p>Protege &mdash; це вільний, відкритий редактор онтологій і фреймворк для побудови баз знань.</p>

			<p> Платформа Protege підтримує два основних способи моделювання онтологій за допомогою редакторів Protege-Frames і Protege&mdash;OWL. Онтології, побудовані в Protege , можуть бути експортовані в безліч форматів, включаючи RDF (RDF Schema ), OWL і XML Schema . 
			</p>

			<p> Protege має відкриту, легко розширювану архітектуру за рахунок підтримки модулів розширення функціональності. 
			</p>
			<p> Prot?g? підтримується значним співтовариством, що складається з розробників і вчених, урядових і корпоративних користувачів, що використовують його для вирішення завдань, пов'язаних зі знаннями, в таких різноманітних галузях, як біомедицина, збір знань і корпоративне моделювання. </p>

			<p class="bld">Редактор Protege&ndash;Frames</p>

			<p>Редактор Protege&mdash;Frames дозволяє користувачам будувати і заповнювати онтології, засновані на фреймах, відповідно до OKBC ( Open Knowledge Base Connectivity protocol&mdash;прикладний інтерфейс програмування для доступу до баз знань систем уявлення знань). У цій моделі онтологія складається з набору класів, організованих в категоризовать ієрархію, для подання важливих понять області, набору слотів, пов'язаних з класами для опису їх властивостей і відносин між ними, і набору примірників цих класів&mdash;окремих екземплярів понять, які мають певні значення своїх властивостей.
			</p>

			<p class="bld">Редактор Protege&ndash;OWL</p>

			<p>Редактор Protege&ndash;OWL дозволяє користувачам будувати онтології для семантичної павутини, зокрема на OWL. OWL&mdash;онтологія може включати описи класів, властивостей і їх примірників. Даючи таку онтологію, формальна семантика OWL визначає як отримувати логічні слідства, тобто факти, які не присутні безпосередньо в онтології, але можуть бути виведені з існуючих за допомогою семантики. Ці висновки можуть бути засновані на одному документі або на безлічі розподілених документів, які були об'єднані з використаний ием певних механізмів OWL .
			</p>

			<a name="p63"></a>

			<h3>6.3 Використання ТМО для організації логічного висновку.</h3>

			<p>Використання Теоретико&mdash;множинних операцій (ТМО) для організації логічного висновку було детально описано в роботах Григор'єва О.В.&nbsp;<a href="#ref10">[10&ndash;12]</a>.
			</p>

			<p> Коротко представити принцип роботи машини логічного висновку, заснованої на ТМО можна наступним чином:</p>

			<ul>
				<li>Застосовуються (ТМО) над наявними прототипами як сукупностями структурних компонент, що мають ті чи інші ознаки;</li>
				<li>Классіфікація окремого рівня є І&mdash;АБО&mdash;дерево, де кожен вузол має список прототипів, що мають даний приз нак ( «вхід&mdash;вихід»).</li>
				<li>Пошук необхідного рішення (прототипу) виконується шляхом діалогу, де кожен крок передбачає вибір конкретного АБО&mdash;вузла з наступним продовженням діалогу.</li>
				<li> Після кроку вибору відбувається звуження залишилися в розгляді прототипів, а також видалення тих АБО&mdash;вузлів , де число прототипів дійшло до 0.</li>
			</ul>

			<a name="p7"></a>

			<h2>7.	Постановка завдання та опис розробляємої надбудови</h2>

			<p>Так як у всіх розглянутих САПР є такі недоліки як: 1) відсутність можливості завдання алгоритму проектування як методики проектування певного класу пристроїв з подальшим повторним використанням цього алгоритму; 2) високі вимоги до рівня знання проектувальником предметної області; то виникає відповідна задача: створити програмну надбудову над САПР FPGA для можливості створення алгоритму проектування для його багаторазового використання.
			</p>

			<p>Розроблюване ПЗ повинно відповідати наступним вимогам:</p>

			<ol>
				<li>Програмна надбудова створюється з метою узагальнення користувальницького досвіду, який в подальшому буде використаний для створення нових продуктів. Отже, на вхід системи повинні подаватися існуючі бібліотеки компонентів. Передбачається, що вони вже налагоджені і не потребують перевірки.
				</li>
				<li>Надбудова повинна спростити процес проектування шляхом його автоматизації.</li>
				<li>Система повинна знизити вимоги до рівня знань проектувальника.</li>
				<li> Процес роботи програмної надбудови полягає в тому, що вона за допомогою діалогу з користувачем дізнається потрібні йому структурні компоненти, і на підставі цієї інформації видає йому необхідну схему у вигляді VHDL коду або посилання на схему.
				</li>
				<li>Логічний висновок програми повинен бути організований за допомогою ТМО. Вибір на користь цього походу зроблений з наступних причин:
					<ol>
						<li>При використанні таких пакетів як Clips і Protege підвищуються вимоги до проектувальника в області організації знань. </li>
						<li>Крім того, виникає необхідність настройки програмного взаємодії між Clips / Protege і надбудовою над САПР. </li>
						<li>Підхід із застосуванням ТМО вимагає від нас тільки програмної реалізації самого підходу.</li>
					</ol>
				</li>
				<li> Система повинна реалізовувати так званий підхід <q>дурного експерта</q>&nbsp;<a href="#ref13">[13]</a>. 
					<q>Дурний експерт</q> &mdash; це проектувальник, у якого відсутні навички в області організації знань. В такому випадку сама система бере на себе всю роботу по організації знань (навчання, побудова дерева рішень, логічний висновок).
				</li>
				<li> Система повинна бути реалізована в якості надбудови над САПР Vivado Design Suite , оскільки він є найбільш просунутим з усіх розглянутих пакетів і одним з найбільш популярних серед проектувальників.
				</li>
			</ol>

			<a name="p8"></a>

			<h2>Висновки</h2>
			
			<p>В результаті науково&mdash;дослідної роботи були зібрані і вивчені матеріали з питань, пов'язаних з темою магістерської роботи.
			</p>
			
			<p>У дослідженні були проаналізовані існуючі САПР РЕА, методи створення машин логічного висновку, описана структура розроблюваного програмного продукту.
			</p>
					        
			<p> Автоматизація процесу проектування є актуальним завданням , оскільки дозволить істотно скоротити час розробки кінцевого продукту. Крім того на сьогоднішній день вона повністю не реалізована, і той хто зробить це першим матиме суттєву перевагу над конкурентами. 
			</p>
			
			<a name="ref"></a>
			<h2>Перелік посилань</h2>
			<ol>
				<li><a name="ref1"></a>Хвищук,&nbsp;А.Ю. Современные средства генерирования VHDL описаний аппаратуры при проектировании программируемых схем FPGA / Хвищук&nbsp;А.Ю., Григорьев&nbsp;А.В. // Микроелектроника и информатика &mdash; 2018. 25&ndash;я Всеросийская межвузовская научно&ndash;техническая конференция студентов и аспирантов: тезисы докладов. &mdash; М.:МИЭТ, 2018. &mdash; 316 с.</li>
				<li><a name="ref2"></a>Automated sports rim design in CAD system&nbsp;Электронный ресурс] // IEEE Xplore Digital Library. &mdash; Режим доступа: <a href="https://ieeexplore.ieee.org/document/8376856/" target="_blank">https://ieeexplore.ieee.org/document/8376856/</a> &mdash; Загл. с екрану.</li>
				<li><a name="ref3"></a>A Methodology of Knowledge Management Based on Ontology in Collaborative Design&nbsp;Электронный ресурс] // IEEE Xplore Digital Library. &mdash; Режим доступа: <a href="https://ieeexplore.ieee.org/document/4739796" target="_blank">https://ieeexplore.ieee.org/document/4739796</a> &mdash; Загл. с екрану.</li>
				<li><a name="ref4"></a>Базы знаний интеллектуальных систем / Т.А.&nbsp;Гаврилова, В.Ф.&nbsp;Хорошевский &mdash; СПб: Питер, 2000. &mdash; 384 с.</li>
				<li><a name="ref5"></a>Исследование способов организации построения инструментальной интеллектуальной оболочки для проектирования сложных объектов на базе экспертных методик&nbsp;Электронный ресурс] // Портал магистров ДонНТУ. &mdash; Режим доступа: <a href="http://masters.donntu.org/2009/fvti/malyavka/diss/index.htm" target="_blank">http://masters.donntu.org/2009/fvti/malyavka/diss/index.htm</a> &mdash; Загл. с екрану.</li>
				<li><a name="ref6"></a>Процесс проектирования цифровых устройств с использованием ПЛИС&nbsp;Электронный ресурс] // Электронная Образовательная Система МГТУ им. Н.Э.Баумана &mdash; Режим доступа: <a href="http://e&mdash;learning.bmstu.ru/moodle/pluginfile.php/2910/mod_resource/content/3/%D0%AD%D0%92%D0%9C_5.pdf" target="_blank">http://e&mdash;learning.bmstu.ru/moodle/pluginfile.php/2910/mod_resource/content/3/%D0%AD%D0%92%D0%9C_5.pdf</a> &mdash; Загл. с екрану.</li>
				<li><a name="ref7"></a>Wikipedia contributors. (2018, December 26). Xilinx Vivado. In Wikipedia, The Free Encyclopedia. Retrieved 23:09, January 8, 2019, from <a href="https://en.wikipedia.org/w/index.php?title=Xilinx_Vivado&oldid=875403824" target="_blank">https://en.wikipedia.org/w/index.php?title=Xilinx_Vivado&oldid=875403824</a> &mdash; Загл. с екрану.</li>
				<li><a name="ref8"></a>Wikipedia contributors. (2018, November 22). Intel Quartus Prime. In Wikipedia, The Free Encyclopedia. Retrieved 23:12, January 8, 2019, from <a href="https://en.wikipedia.org/w/index.php?title=Intel_Quartus_Prime&oldid=870064844" target="_blank">https://en.wikipedia.org/w/index.php?title=Intel_Quartus_Prime&oldid=870064844</a> &mdash; Загл. с екрану.</li>
				<li><a name="ref13"></a>CLIPS&nbsp;Электронный ресурс] : Материал из Википедии &mdash; свободной энциклопедии : Версия 95978215, сохранённая в 12:57 UTC 29 октября 2018 / Авторы Википедии // Википедия, свободная энциклопедия. &mdash; Электрон. дан. &mdash; Сан&mdash;Франциско: Фонд Викимедиа, 2018. &mdash; Режим доступа: <a href="https://ru.wikipedia.org/?oldid=95978215" target="_blank">https://ru.wikipedia.org/?oldid=95978215</a> &mdash; Загл. с екрану.</li>
				<li><a name="ref9"></a>Григорьев&nbsp;А.В. Методы поиска новых решений в специализированной инструментальной оболочке для создания интеллектуальных САПР // Десятая национальная конференция по искусственному интеллекту с международным участием КИИ&ndash;2006 (25&ndash;28 сентября 2006г., Обнинск): Труды конференции. &mdash; №. 3. &mdash; С. 1031&ndash;1046.</li>
				<li><a name="ref10"></a>Григорьев&nbsp;А.В. Теоретико&ndash;множественные операции над грамматиками как инструментарий для построения интеллектуальных САПР // XIII национальная конференция по искусственному интеллекту с международным участием КИИ&ndash;2012 (16&ndash;20 октября 2012 г., Белгород, Россия): Труды конференции. В 4&ndash;т., Белгород: Изд&ndash;во БГТУ, 2012, Т.3, с.202&ndash;209</li>
				<li><a name="ref11"></a>Григорьев&nbsp;А.В., Каспаров&nbsp;А.А. И/ИЛИ&mdash;ДЕРЕВО КАК СРЕДСТВО АБСТРАКТНОГО ПРЕДСТАВЛЕНИЯ БАЗЫ ЗНАНИЙ. &mdash; 2002.</li>
				<li><a name="ref12"></a>Григорьев&nbsp;А.В. Пути создания интеллектуальных САПР при различных уровнях квалификации экспертов //Донецк: ИПИИ МОН и НАН Украины <q>Наука и образование</q>. &mdash; 2005. &mdash; С. 758&ndash;763.</li>
			</ol>
				
		</div> <!-- maintext -->
	
	</div> <!-- middleblock -->

	<div id="menub">
		<a class="mitemb" href="../indexu.htm">Резюме</a>
		<a class="mitemb" href="../bio/indexu.htm">Біографія</a>
	</div>
</div>
</body>
</html>
